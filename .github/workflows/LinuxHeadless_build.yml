name: Linux Headless build

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: |
      (
        (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
        (github.event_name == 'pull_request' && github.base_ref == 'master')
      ) &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[lin only]') &&
      !contains(github.event.head_commit.message, '[win only]') &&
      !contains(github.event.head_commit.message, '[mac only]')
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Update packages
      run: sudo apt-get update

    - name: Install packages
      run: sudo apt-get install --fix-missing cmake ninja-build

    - name: Install OpenSSL3
      run: cmake/linux_actions/install_openssl3.sh

    - name: Install LLVM
      run: . cmake/linux_actions/install_llvm_headless.sh

    - name: Install Libsodium
      run: . cmake/linux_actions/install_libsodium.sh

    - name: Generate CMake files
      run: . cmake/linux_actions/generate_cmake_files_headless.sh

    - name: Build
      run: pushd build/current && ninja tests -k 0 && popd

    - name: Build AppImage
      run: cmake/appimage_builder.sh --headless

    - name: Create release_notes.txt
      run: cmake/generate_archives.sh Linux

    - uses: actions/upload-artifact@v4
      with:
        name: LinuxHeadless-binaries
        path: |
          Hypersomnia-Headless.AppImage
          hypersomnia/release_notes.txt

  container-publish:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      ORG_NAME: teamhypersomnia
      IMAGE_NAME: hypersomnia-server
      TAG_NAME: "latest"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: "v2.4.1"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.TAG_NAME }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Save digest
        id: digest-saver
        run: |
          echo "digest=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }} | jq -r '.config.digest')" >> "$GITHUB_OUTPUT"

      - name: Sign the published Docker image
        env:
          TAGS: ${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}
          DIGEST: ${{ steps.digest-saver.outputs.digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
