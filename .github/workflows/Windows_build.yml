name: Windows build

on:
  push:
    branches:
      - master

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[ds only]') && !contains(github.event.head_commit.message, '[lin only]') && !contains(github.event.head_commit.message, '[mac only]')"

    runs-on: windows-2025
    env:
      CMAKE_VERSION: "3.29.2"
      CONFIGURATION: Release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install CMake
        run: |
          $url = "https://github.com/Kitware/CMake/releases/download/v${env:CMAKE_VERSION}/cmake-${env:CMAKE_VERSION}-windows-x86_64.msi"
          $destination = "C:\projects\cmake-${env:CMAKE_VERSION}-windows-x86_64.msi"
          Invoke-WebRequest -Uri $url -OutFile $destination
          Start-Process msiexec -ArgumentList "/i", $destination, "/quiet", "/qn", "/norestart", "/log", "install.log", "ADD_CMAKE_TO_PATH=System" -Wait
        shell: powershell

      - name: Add CMake to PATH
        run: echo "::add-path::C:\\Program Files\\CMake\\bin"

      - name: Install Ninja
        run: |
          mkdir C:\projects\deps
          cd C:\projects\deps
          $ninjaUrl = "https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip"
          Invoke-WebRequest -Uri $ninjaUrl -OutFile ninja.zip
          Expand-Archive ninja.zip -DestinationPath C:\projects\deps\ninja
          echo "::add-path::C:\\projects\\deps\\ninja"
          ninja --version
        shell: powershell

      - name: Install LLVM 17.0.6
        run: |
          $llvmUrl = "https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/LLVM-17.0.6-win64.exe"
          Invoke-WebRequest -Uri $llvmUrl -OutFile llvm-installer.exe
          Start-Process -FilePath llvm-installer.exe -ArgumentList "/S", "/D=C:\Program Files\LLVM" -Wait
        shell: powershell

      - name: Setup Visual Studio Environment
        run: '"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" x64'
        shell: cmd

      - name: Configure and Build steam_integration
        run: |
          cd cmake/steam_integration
          mkdir build
          cd build
          cmake -DBUILD_STEAM=0 -DCMAKE_BUILD_TYPE=Release -G Ninja ..
          ninja install
          cd ../../..
        shell: powershell

      - name: Call Ninja
        run: |
          $env:OPENSSL_ROOT_DIR = "$env:ProgramFiles\OpenSSL"
          mkdir nin
          cd nin
          mkdir $env:CONFIGURATION
          cd $env:CONFIGURATION
          cmake -G Ninja `
            -DLINK_STEAM_INTEGRATION=1 `
            -DCMAKE_C_COMPILER=clang-cl `
            -DCMAKE_CXX_COMPILER=clang-cl `
            -DCMAKE_LINKER=lld-link `
            -DARCHITECTURE="x64" `
            -DCMAKE_BUILD_TYPE=$env:CONFIGURATION `
            -DOUTPUT_TO_HYPERSOMNIA_FOLDER=1 `
            -DOPENSSL_ROOT_DIR="$env:OPENSSL_ROOT_DIR" `
            ../..
          ninja
        shell: powershell

      - name: Run tests
        run: |
          cd ../../hypersomnia
          & ../cmake/test_pack_upload.ps1 -configuration $env:CONFIGURATION -console_mode 0
        shell: powershell

      - name: Run tests and package
        run: |
          cd hypersomnia
          pwsh ../cmake/test_pack_upload.ps1 -configuration ${{ env.CONFIGURATION }} -console_mode 0
        shell: powershell

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release_notes
          path: hypersomnia/release_notes.txt

      - name: Upload SFX artifact
        uses: actions/upload-artifact@v4
        with:
          name: Hypersomnia-sfx
          path: Hypersomnia-for-Windows.exe

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: Hypersomnia-zip
          path: Hypersomnia-for-Windows.zip
